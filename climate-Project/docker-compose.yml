
# ------------------------------------------------------------------------------
# More resources related to this file:
# [1] Overview   | https://docs.docker.com/compose/
# [2] PostgreSQL | https://github.com/docker-library/docs/tree/master/postgres
# [3] Node.js    | https://github.com/nodejs/docker-node/blob/master/README.md#how-to-use-this-image
# -------------
#  More resources for your projects:
# [4] Samples    | https://github.com/docker/awesome-compose
# [5] Env Vars   | https://docs.docker.com/compose/environment-variables/
# [6] Secrets    | https://docs.docker.com/engine/swarm/secrets/#use-secrets-in-compose
# ------------------------------------------------------------------------------

# This section defines all of our components, each which is itself a docker image [1].
services:
  heroku-cli:
    build: ./heroku
    env_file: ./heroku/.env

  # This section defines our PostgreSQL database [2].
  # Note that the name `db` also becomes the hostname of the postgres container.
  # For more details see `server.js`.
  db:
    build: ./db
    env_file: .env
    volumes:
      - climatrak-db:/var/lib/postgresql/data  # Creates a docker managed volume to persist your data.
      - ./init_data:/docker-entrypoint-initdb.d

  # ------------------------------------------- # This section defines our Node.js image [3].
  web:
    build: 
      context: ./
      dockerfile: Dockerfile
      target: devapp
    depends_on:
      - db                                      
    env_file: .env
    ports:
        - "3000:3000" 
    volumes:
      - ./src:/app/src

# This defines our volume(s), which will perist throughout startups.
# If you want to get rid of a hanging volume, e.g. to test your database init,
# run `docker-compose rm -v`. Note that this will remove ALL of your data, so
# be extra sure you've made a stable backup somewhere.
volumes:
  climatrak-db: {}
